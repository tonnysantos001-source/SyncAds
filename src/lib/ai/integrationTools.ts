// Sistema de Ferramentas de Integra√ß√£o para IA
import { supabase } from '../supabase';

export interface IntegrationAuditResult {
  platform: string;
  status: 'connected' | 'disconnected' | 'pending' | 'error';
  lastSync?: string;
  capabilities: string[];
  issues?: string[];
  recommendations?: string[];
}

export interface IntegrationToolResult {
  success: boolean;
  data?: any;
  error?: string;
  message: string;
}

// Prompt espec√≠fico para controle de integra√ß√µes
export const integrationControlPrompt = `
# üîå SISTEMA DE CONTROLE DE INTEGRA√á√ïES

Voc√™ tem controle total sobre as integra√ß√µes do SyncAds. Pode auditar, testar, conectar e gerenciar todas as plataformas.

## üìã INTEGRA√á√ïES DISPON√çVEIS

### 1. **Meta Ads (Facebook/Instagram)**
**Capacidades:**
- Criar e gerenciar campanhas
- Analisar performance
- Otimizar or√ßamentos
- Segmentar audi√™ncias

**Para conectar:**
\`\`\`integration-action
{
  "action": "audit",
  "platform": "META_ADS"
}
\`\`\`

### 2. **Google Ads**
**Capacidades:**
- Campanhas de Pesquisa
- Display e YouTube
- Shopping Ads
- An√°lise de convers√µes

**Para conectar:**
\`\`\`integration-action
{
  "action": "audit",
  "platform": "GOOGLE_ADS"
}
\`\`\`

### 3. **LinkedIn Ads**
**Capacidades:**
- An√∫ncios B2B
- Segmenta√ß√£o profissional
- Lead generation
- InMail patrocinado

**Para conectar:**
\`\`\`integration-action
{
  "action": "audit",
  "platform": "LINKEDIN_ADS"
}
\`\`\`

### 4. **TikTok Ads**
**Capacidades:**
- V√≠deos virais
- Segmenta√ß√£o por interesse
- Spark Ads
- P√≠xel de convers√£o

**Para conectar:**
\`\`\`integration-action
{
  "action": "audit",
  "platform": "TIKTOK_ADS"
}
\`\`\`

### 5. **Twitter Ads (X)**
**Capacidades:**
- Tweets promovidos
- Segmenta√ß√£o por hashtags
- Audi√™ncias customizadas
- An√°lise de engajamento

**Para conectar:**
\`\`\`integration-action
{
  "action": "audit",
  "platform": "TWITTER_ADS"
}
\`\`\`

## üîß A√á√ïES DISPON√çVEIS

### 1. AUDITAR INTEGRA√á√ÉO
Verifica o status atual de uma integra√ß√£o e suas capacidades.

\`\`\`integration-action
{
  "action": "audit",
  "platform": "META_ADS"
}
\`\`\`

**Retorna:**
- Status (conectada/desconectada)
- √öltima sincroniza√ß√£o
- Capacidades dispon√≠veis
- Problemas detectados
- Recomenda√ß√µes

### 2. AUDITAR TODAS
Verifica todas as integra√ß√µes de uma s√≥ vez.

\`\`\`integration-action
{
  "action": "audit_all"
}
\`\`\`

### 3. TESTAR CONEX√ÉO
Testa se uma integra√ß√£o est√° funcionando.

\`\`\`integration-action
{
  "action": "test",
  "platform": "GOOGLE_ADS"
}
\`\`\`

### 4. VERIFICAR CAPACIDADES
Lista o que voc√™ pode fazer com uma integra√ß√£o espec√≠fica.

\`\`\`integration-action
{
  "action": "capabilities",
  "platform": "META_ADS"
}
\`\`\`

### 5. DIAGNOSTICAR PROBLEMAS
Identifica e sugere solu√ß√µes para problemas.

\`\`\`integration-action
{
  "action": "diagnose",
  "platform": "LINKEDIN_ADS"
}
\`\`\`

### 6. LISTAR STATUS
Mostra status resumido de todas as integra√ß√µes.

\`\`\`integration-action
{
  "action": "list_status"
}
\`\`\`

## üìä EXEMPLO DE AUDITORIA

Quando o usu√°rio pedir para auditar integra√ß√µes, voc√™ deve:

1. Usar o comando \`audit_all\`
2. Analisar os resultados
3. Apresentar um relat√≥rio claro
4. Sugerir a√ß√µes se necess√°rio

**Exemplo de resposta:**

"Vou realizar uma auditoria completa nas integra√ß√µes. Um momento...

\`\`\`integration-action
{
  "action": "audit_all"
}
\`\`\`

‚úÖ **Auditoria Conclu√≠da**

**Meta Ads (Facebook/Instagram):**
- Status: ‚ùå Desconectada
- A√ß√£o: Configure sua chave de API no menu Integra√ß√µes
- Capacidades: Criar campanhas, an√°lise de performance, otimiza√ß√£o de or√ßamento

**Google Ads:**
- Status: ‚úÖ Conectada
- √öltima sync: H√° 2 horas
- Capacidades: Campanhas ativas, an√°lise funcionando
- ‚ö†Ô∏è Aviso: Or√ßamento pr√≥ximo do limite

**LinkedIn Ads:**
- Status: ‚ùå Desconectada
- A√ß√£o: Conecte para campanhas B2B

**Recomenda√ß√µes:**
1. Conecte Meta Ads para ampliar alcance
2. Aumente or√ßamento do Google Ads
3. Configure LinkedIn para p√∫blico corporativo"

## üéØ QUANDO USAR CADA A√á√ÉO

- **audit / audit_all**: Quando usu√°rio pede "auditar", "verificar", "status"
- **test**: Quando precisa confirmar se integra√ß√£o funciona
- **capabilities**: Quando usu√°rio pergunta "o que posso fazer"
- **diagnose**: Quando h√° erros ou problemas
- **list_status**: Para vis√£o r√°pida de todas

## üö® REGRAS IMPORTANTES

1. **Sempre use os blocos de c√≥digo** \`\`\`integration-action
2. **JSON v√°lido** dentro dos blocos
3. **Plataformas em CAPS**: META_ADS, GOOGLE_ADS, etc.
4. **Seja espec√≠fico** em suas recomenda√ß√µes
5. **N√£o invente dados** - use apenas o que o sistema retornar

## üí° DICAS

- Se usu√°rio n√£o especificar plataforma, fa√ßa \`audit_all\`
- Sempre explique o resultado em linguagem clara
- Sugira pr√≥ximos passos pr√°ticos
- Destaque problemas com ‚ö†Ô∏è ou ‚ùå
- Celebre sucessos com ‚úÖ ou üéâ
`;

// Classe de ferramentas de integra√ß√£o
export class IntegrationTools {
  private userId: string;

  constructor(userId: string) {
    this.userId = userId;
  }

  // Auditar uma integra√ß√£o espec√≠fica
  async auditIntegration(platform: string): Promise<IntegrationToolResult> {
    try {
      const { data, error } = await supabase
        .from('Integration')
        .select('*')
        .eq('userId', this.userId)
        .eq('platform', platform)
        .single();

      if (error && error.code !== 'PGRST116') {
        throw error;
      }

      const capabilities = this.getCapabilities(platform);
      const status = data ? (data.isConnected ? 'connected' : 'disconnected') : 'disconnected';
      
      const result: IntegrationAuditResult = {
        platform,
        status,
        lastSync: data?.lastSyncAt || undefined,
        capabilities,
        issues: this.detectIssues(data, platform),
        recommendations: this.getRecommendations(status, platform),
      };

      return {
        success: true,
        data: result,
        message: this.formatAuditMessage(result),
      };
    } catch (error: any) {
      return {
        success: false,
        error: error.message,
        message: `‚ùå Erro ao auditar ${platform}: ${error.message}`,
      };
    }
  }

  // Auditar todas as integra√ß√µes
  async auditAll(): Promise<IntegrationToolResult> {
    try {
      const platforms = ['META_ADS', 'GOOGLE_ADS', 'LINKEDIN_ADS', 'TIKTOK_ADS', 'TWITTER_ADS'];
      const audits: IntegrationAuditResult[] = [];

      for (const platform of platforms) {
        const result = await this.auditIntegration(platform);
        if (result.success && result.data) {
          audits.push(result.data);
        }
      }

      return {
        success: true,
        data: audits,
        message: this.formatAllAuditsMessage(audits),
      };
    } catch (error: any) {
      return {
        success: false,
        error: error.message,
        message: `‚ùå Erro ao auditar integra√ß√µes: ${error.message}`,
      };
    }
  }

  // Listar status resumido
  async listStatus(): Promise<IntegrationToolResult> {
    try {
      const { data, error } = await supabase
        .from('Integration')
        .select('platform, isConnected, lastSyncAt')
        .eq('userId', this.userId);

      if (error) throw error;

      const statusMap = new Map(data?.map(d => [d.platform, d]) || []);
      const platforms = ['META_ADS', 'GOOGLE_ADS', 'LINKEDIN_ADS', 'TIKTOK_ADS', 'TWITTER_ADS'];
      
      const statusList = platforms.map(platform => ({
        platform,
        status: statusMap.has(platform) && statusMap.get(platform)?.isConnected ? '‚úÖ Conectada' : '‚ùå Desconectada',
        lastSync: statusMap.get(platform)?.lastSyncAt || 'Nunca',
      }));

      return {
        success: true,
        data: statusList,
        message: this.formatStatusList(statusList),
      };
    } catch (error: any) {
      return {
        success: false,
        error: error.message,
        message: `‚ùå Erro ao listar status: ${error.message}`,
      };
    }
  }

  // Obter capacidades de uma plataforma
  private getCapabilities(platform: string): string[] {
    const capabilities: Record<string, string[]> = {
      META_ADS: [
        'Criar campanhas de Facebook e Instagram',
        'Segmenta√ß√£o avan√ßada de audi√™ncia',
        'An√°lise de performance em tempo real',
        'Otimiza√ß√£o autom√°tica de or√ßamento',
        'A/B testing de criativos',
        'Remarketing e lookalike audiences',
      ],
      GOOGLE_ADS: [
        'Campanhas de Pesquisa (Search)',
        'An√∫ncios Display e YouTube',
        'Shopping Ads para e-commerce',
        'Campanhas Performance Max',
        'An√°lise de convers√µes e ROI',
        'Smart Bidding autom√°tico',
      ],
      LINKEDIN_ADS: [
        'An√∫ncios B2B segmentados',
        'Targeting por cargo e empresa',
        'Lead Gen Forms nativos',
        'InMail patrocinado',
        'An√°lise de engajamento profissional',
        'Retargeting de visitantes',
      ],
      TIKTOK_ADS: [
        'V√≠deos In-Feed',
        'TopView e Brand Takeover',
        'Spark Ads (boost org√¢nico)',
        'Segmenta√ß√£o por interesse e comportamento',
        'P√≠xel de convers√£o',
        'Cat√°logo de produtos',
      ],
      TWITTER_ADS: [
        'Tweets promovidos',
        'Segmenta√ß√£o por hashtags e interesse',
        'Audi√™ncias customizadas',
        'An√°lise de engajamento',
        'Campanhas de instala√ß√£o de app',
        'V√≠deos e carross√©is',
      ],
    };

    return capabilities[platform] || ['Capacidades a definir'];
  }

  // Detectar problemas
  private detectIssues(data: any, platform: string): string[] {
    const issues: string[] = [];

    if (!data) {
      issues.push('Integra√ß√£o n√£o configurada');
      return issues;
    }

    if (!data.isConnected) {
      issues.push('Integra√ß√£o desconectada - configure credenciais');
    }

    if (!data.credentials || Object.keys(data.credentials).length === 0) {
      issues.push('Credenciais n√£o configuradas');
    }

    if (data.lastSync) {
      const lastSync = new Date(data.lastSync);
      const hoursSinceSync = (Date.now() - lastSync.getTime()) / (1000 * 60 * 60);
      
      if (hoursSinceSync > 24) {
        issues.push(`√öltima sincroniza√ß√£o h√° ${Math.floor(hoursSinceSync)} horas - pode estar desatualizado`);
      }
    }

    return issues;
  }

  // Obter recomenda√ß√µes
  private getRecommendations(status: string, platform: string): string[] {
    const recommendations: string[] = [];

    if (status === 'disconnected') {
      recommendations.push(`Conecte ${this.formatPlatformName(platform)} em: Configura√ß√µes ‚Üí Integra√ß√µes`);
      recommendations.push(`Configure sua chave de API para come√ßar a usar`);
    }

    if (status === 'connected') {
      recommendations.push(`‚úÖ Integra√ß√£o ativa! Voc√™ j√° pode criar campanhas`);
      recommendations.push(`Explore as capacidades dispon√≠veis desta plataforma`);
    }

    return recommendations;
  }

  // Formatar nome da plataforma
  private formatPlatformName(platform: string): string {
    const names: Record<string, string> = {
      META_ADS: 'Meta Ads (Facebook/Instagram)',
      GOOGLE_ADS: 'Google Ads',
      LINKEDIN_ADS: 'LinkedIn Ads',
      TIKTOK_ADS: 'TikTok Ads',
      TWITTER_ADS: 'Twitter Ads (X)',
    };
    return names[platform] || platform;
  }

  // Formatar mensagem de auditoria
  private formatAuditMessage(result: IntegrationAuditResult): string {
    const icon = result.status === 'connected' ? '‚úÖ' : '‚ùå';
    let message = `\n**${icon} ${this.formatPlatformName(result.platform)}**\n`;
    message += `Status: ${result.status === 'connected' ? '‚úÖ Conectada' : '‚ùå Desconectada'}\n`;
    
    if (result.lastSync) {
      message += `√öltima sincroniza√ß√£o: ${result.lastSync}\n`;
    }

    message += `\n**Capacidades:**\n`;
    result.capabilities.forEach(cap => {
      message += `‚Ä¢ ${cap}\n`;
    });

    if (result.issues && result.issues.length > 0) {
      message += `\n**‚ö†Ô∏è Problemas detectados:**\n`;
      result.issues.forEach(issue => {
        message += `‚Ä¢ ${issue}\n`;
      });
    }

    if (result.recommendations && result.recommendations.length > 0) {
      message += `\n**üí° Recomenda√ß√µes:**\n`;
      result.recommendations.forEach(rec => {
        message += `‚Ä¢ ${rec}\n`;
      });
    }

    return message;
  }

  // Formatar mensagem de todas as auditorias
  private formatAllAuditsMessage(audits: IntegrationAuditResult[]): string {
    let message = `\n# üîç AUDITORIA COMPLETA DE INTEGRA√á√ïES\n\n`;
    
    const connected = audits.filter(a => a.status === 'connected').length;
    const total = audits.length;
    
    message += `**Resumo:** ${connected}/${total} integra√ß√µes ativas\n\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

    audits.forEach(audit => {
      message += this.formatAuditMessage(audit);
      message += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    });

    // Recomenda√ß√µes gerais
    if (connected < total) {
      message += `\n**üéØ Pr√≥ximos Passos:**\n`;
      message += `1. Conecte as ${total - connected} integra√ß√µes pendentes\n`;
      message += `2. Configure suas chaves de API\n`;
      message += `3. Teste cada integra√ß√£o antes de criar campanhas\n`;
    } else {
      message += `\n**üéâ Parab√©ns!** Todas as integra√ß√µes est√£o configuradas e funcionando!\n`;
    }

    return message;
  }

  // Formatar lista de status
  private formatStatusList(statusList: any[]): string {
    let message = `\n**üìä Status das Integra√ß√µes:**\n\n`;
    
    statusList.forEach(item => {
      message += `${item.status} **${this.formatPlatformName(item.platform)}**\n`;
      message += `   ‚îî‚îÄ √öltima sync: ${item.lastSync}\n\n`;
    });

    return message;
  }
}

// Detectar comandos de integra√ß√£o
export function detectIntegrationAction(response: string): { action: string; platform?: string } | null {
  const regex = /```integration-action\s*\n([\s\S]*?)```/;
  const match = response.match(regex);
  
  if (!match) return null;
  
  try {
    return JSON.parse(match[1].trim());
  } catch {
    return null;
  }
}

// Limpar blocos de integra√ß√£o da resposta
export function cleanIntegrationBlocksFromResponse(response: string): string {
  return response
    .replace(/```integration-action\s*\n[\s\S]*?```/g, '')
    .trim();
}

// Detectar inten√ß√£o de auditoria mesmo sem bloco formal (fallback)
export function detectAuditIntentFromText(userMessage: string, aiResponse: string): { action: string; platform?: string } | null {
  const messageLower = userMessage.toLowerCase();
  const responseLower = aiResponse.toLowerCase();
  
  // Se a mensagem do usu√°rio menciona auditoria/status e a IA confirma
  const isAuditRequest = (
    (messageLower.includes('auditor') || 
     messageLower.includes('verificar') || 
     messageLower.includes('status') ||
     messageLower.includes('listar')) &&
    (messageLower.includes('integra') || 
     messageLower.includes('conex') || 
     messageLower.includes('plataforma'))
  );

  const aiConfirmsAudit = (
    responseLower.includes('vou') && 
    (responseLower.includes('auditor') || 
     responseLower.includes('verificar'))
  );

  if (!isAuditRequest || !aiConfirmsAudit) {
    return null;
  }

  // Detectar plataforma espec√≠fica
  const platforms: Record<string, string> = {
    'facebook': 'META_ADS',
    'instagram': 'META_ADS',
    'meta': 'META_ADS',
    'google': 'GOOGLE_ADS',
    'linkedin': 'LINKEDIN_ADS',
    'tiktok': 'TIKTOK_ADS',
    'twitter': 'TWITTER_ADS',
  };

  for (const [keyword, platform] of Object.entries(platforms)) {
    if (messageLower.includes(keyword)) {
      return { action: 'audit', platform };
    }
  }

  // Se n√£o especificou plataforma, auditar todas
  return { action: 'audit_all' };
}
