import { createClient } from "@supabase/supabase-js";
import { Database } from "./database.types";
import { SUPABASE_CONFIG } from "./config";

// Configura√ß√£o b√°sica do Supabase com persist√™ncia de sess√£o
export const supabase = createClient<Database>(
  SUPABASE_CONFIG.url,
  SUPABASE_CONFIG.anonKey,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storage: localStorage,
      storageKey: "supabase.auth.token",
    },
    db: {
      schema: "public",
    },
  },
);

/**
 * Verifica se a sess√£o atual √© v√°lida
 * @returns true se a sess√£o est√° v√°lida, false caso contr√°rio
 */
export const ensureValidSession = async (): Promise<boolean> => {
  try {
    const {
      data: { session },
      error,
    } = await supabase.auth.getSession();

    if (error) {
      console.error("‚ùå Erro ao verificar sess√£o:", error);
      return false;
    }

    if (!session) {
      console.warn("‚ö†Ô∏è Nenhuma sess√£o ativa encontrada");
      return false;
    }

    // Verificar se o token est√° pr√≥ximo de expirar (menos de 5 minutos)
    const expiresAt = session.expires_at || 0;
    const now = Math.floor(Date.now() / 1000);
    const timeUntilExpiry = expiresAt - now;

    // S√≥ renovar se realmente estiver perto de expirar
    if (timeUntilExpiry < 300 && timeUntilExpiry > 0) {
      console.log("üîÑ Token pr√≥ximo de expirar, renovando...");
      const { data: refreshData, error: refreshError } =
        await supabase.auth.refreshSession();

      if (refreshError) {
        console.error("‚ùå Erro ao renovar sess√£o:", refreshError);
        return false;
      }

      if (!refreshData.session) {
        console.error("‚ùå Falha ao renovar sess√£o");
        return false;
      }

      console.log("‚úÖ Sess√£o renovada com sucesso");
    }

    return true;
  } catch (error) {
    console.error("‚ùå Erro cr√≠tico ao validar sess√£o:", error);
    return false;
  }
};

/**
 * Wrapper para opera√ß√µes do Supabase que garante sess√£o v√°lida
 * @param operation - Fun√ß√£o a ser executada
 * @param retries - N√∫mero m√°ximo de tentativas (padr√£o: 2)
 */
export const withValidSession = async <T>(
  operation: () => Promise<T>,
  retries = 2,
): Promise<T> => {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      // Garantir sess√£o v√°lida antes da opera√ß√£o
      const isValid = await ensureValidSession();

      if (!isValid) {
        throw new Error("Sess√£o inv√°lida ou expirada");
      }

      // Executar opera√ß√£o
      const result = await operation();
      return result;
    } catch (error: any) {
      console.error(`‚ùå Tentativa ${attempt}/${retries} falhou:`, error);

      // Se √© erro de autentica√ß√£o e ainda tem tentativas, renovar e tentar novamente
      if (
        attempt < retries &&
        (error.message?.includes("JWT") ||
          error.message?.includes("session") ||
          error.message?.includes("auth") ||
          error.code === "PGRST301")
      ) {
        console.log("üîÑ Tentando renovar sess√£o e repetir opera√ß√£o...");
        await new Promise((resolve) => setTimeout(resolve, 1000 * attempt));
        continue;
      }

      throw error;
    }
  }

  throw new Error("Falha ap√≥s todas as tentativas");
};

/**
 * Listener para mudan√ßas de autentica√ß√£o
 */
supabase.auth.onAuthStateChange((event, session) => {
  if (event === "SIGNED_OUT") {
    console.log("üëã Usu√°rio deslogado");
  } else if (event === "SIGNED_IN") {
    console.log("üë§ Usu√°rio logado");
  } else if (event === "TOKEN_REFRESHED") {
    console.log("üîÑ Token renovado automaticamente");
  }
});
