import { supabase } from "./supabase";

/**
 * Fun√ß√£o para verificar se o dispositivo √© mobile REAL
 * N√£o considera DevTools em modo responsivo como mobile
 */
export function isMobileDevice(): boolean {
  // Verifica se tem touch screen E user agent mobile E tela pequena
  const hasTouch = "ontouchstart" in window || navigator.maxTouchPoints > 0;
  const isMobileUA =
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent,
    );
  const isSmallScreen = window.innerWidth <= 768;

  // N√£o √© mobile se n√£o tem touch (DevTools n√£o tem touch real)
  return hasTouch && isMobileUA && isSmallScreen;
}

/**
 * Fun√ß√£o para garantir que a sess√£o do Supabase esteja v√°lida
 * N√ÉO redireciona automaticamente - apenas retorna o status
 */
export async function garantirSessaoValida(): Promise<boolean> {
  try {
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (!session) {
      console.warn("‚ö†Ô∏è Nenhuma sess√£o ativa encontrada");
      return false;
    }

    // Verificar se o token est√° pr√≥ximo de expirar
    const expiresAt = session.expires_at || 0;
    const now = Math.floor(Date.now() / 1000);
    const timeUntilExpiry = expiresAt - now;

    // S√≥ renovar se estiver perto de expirar (menos de 5 minutos)
    if (timeUntilExpiry < 300 && timeUntilExpiry > 0) {
      console.log("üîÑ Token pr√≥ximo de expirar, renovando...");
      const { error } = await supabase.auth.refreshSession();

      if (error) {
        console.error("‚ùå Erro ao atualizar sess√£o:", error);
        return false;
      }

      console.log("‚úÖ Sess√£o renovada com sucesso");
    }

    return true;
  } catch (error) {
    console.error("‚ùå Erro ao verificar sess√£o:", error);
    return false;
  }
}

/**
 * Inicializa verifica√ß√µes peri√≥dicas de sess√£o (APENAS PARA MOBILE REAL)
 * N√£o faz verifica√ß√µes agressivas
 */
export async function inicializarCorrecaoChatMobile(): Promise<void> {
  // S√≥ ativar para dispositivos m√≥veis REAIS
  if (!isMobileDevice()) {
    console.log("üíª Desktop detectado - sem verifica√ß√µes extras");
    return;
  }

  console.log("üì± Dispositivo m√≥vel detectado");

  // Verifica√ß√£o inicial (n√£o bloqueia)
  garantirSessaoValida().catch((err) => {
    console.warn("‚ö†Ô∏è Erro na verifica√ß√£o inicial de sess√£o:", err);
  });

  // Verifica√ß√£o peri√≥dica SUAVE (a cada 10 minutos - n√£o agressivo)
  setInterval(
    () => {
      garantirSessaoValida().catch((err) => {
        console.warn("‚ö†Ô∏è Erro na verifica√ß√£o peri√≥dica:", err);
      });
    },
    10 * 60 * 1000,
  );

  // Verificar quando volta online (importante)
  window.addEventListener("online", () => {
    console.log("üåê Voltou online, verificando sess√£o...");
    garantirSessaoValida().catch((err) => {
      console.warn("‚ö†Ô∏è Erro ao verificar sess√£o:", err);
    });
  });
}
