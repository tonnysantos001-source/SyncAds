import{s as a}from"./index-3FTWUzeK.js";const d={async list(t){try{let r=a.from("Product").select("*, Category(*)").order("createdAt",{ascending:!1});t!=null&&t.status&&(r=r.eq("status",t.status)),t!=null&&t.categoryId&&(r=r.eq("categoryId",t.categoryId)),t!=null&&t.search&&(r=r.or(`name.ilike.%${t.search}%,sku.ilike.%${t.search}%`));const{data:o,error:e}=await r;if(e)throw e;return o}catch(r){throw console.error("Error listing products:",r),r}},async getById(t){try{const{data:r,error:o}=await a.from("Product").select("*, Category(*), ProductVariant(*), ProductImage(*)").eq("id",t).single();if(o)throw o;return r}catch(r){throw console.error("Error getting product:",r),r}},async create(t){try{const{data:r,error:o}=await a.from("Product").insert(t).select().single();if(o)throw o;return r}catch(r){throw console.error("Error creating product:",r),r}},async update(t,r){try{const{data:o,error:e}=await a.from("Product").update({...r,updatedAt:new Date().toISOString()}).eq("id",t).select().single();if(e)throw e;return o}catch(o){throw console.error("Error updating product:",o),o}},async delete(t){try{const{error:r}=await a.from("Product").delete().eq("id",t);if(r)throw r}catch(r){throw console.error("Error deleting product:",r),r}},async updateStock(t,r){try{const{data:o,error:e}=await a.from("Product").update({stock:r,updatedAt:new Date().toISOString()}).eq("id",t).select().single();if(e)throw e;return o}catch(o){throw console.error("Error updating stock:",o),o}}};export{d as p};
