import{s as a}from"./index-hGGesvR-.js";const n={async getAll(r){const{data:e,error:t}=await a.from("Coupon").select("*").eq("userId",r).order("createdAt",{ascending:!1});if(t)throw t;return e},async getById(r){const{data:e,error:t}=await a.from("Coupon").select("*").eq("id",r).single();if(t)throw t;return e},async getByCode(r,e){const{data:t,error:o}=await a.from("Coupon").select("*").eq("code",r.toUpperCase()).eq("userId",e).single();if(o){if(o.code==="PGRST116")return null;throw o}return t},async validate(r,e,t){const o=await n.getByCode(r,e);if(!o)return{valid:!1,error:"Coupon not found"};if(!o.isActive)return{valid:!1,error:"Coupon is inactive"};const s=new Date;if(o.startsAt&&new Date(o.startsAt)>s)return{valid:!1,error:"Coupon not yet active"};if(o.expiresAt&&new Date(o.expiresAt)<s)return{valid:!1,error:"Coupon has expired"};if(o.usageLimit&&o.usageCount>=o.usageLimit)return{valid:!1,error:"Coupon usage limit reached"};if(t&&o.perCustomerLimit){const{data:i}=await a.from("CouponUsage").select("id").eq("couponId",o.id).eq("customerId",t);if(i&&i.length>=o.perCustomerLimit)return{valid:!1,error:"Customer usage limit reached"}}return{valid:!0,coupon:o}},async create(r){const{data:e,error:t}=await a.from("Coupon").insert({...r,code:r.code.toUpperCase()}).select().single();if(t)throw t;return e},async update(r,e){const{data:t,error:o}=await a.from("Coupon").update({...e,updatedAt:new Date().toISOString()}).eq("id",r).select().single();if(o)throw o;return t},async setActive(r,e){return n.update(r,{isActive:e})},async incrementUsage(r){const{data:e,error:t}=await a.rpc("increment_coupon_usage",{coupon_id:r});if(t){const o=await n.getById(r);return n.update(r,{usageCount:o.usageCount+1})}return e},async delete(r){const{error:e}=await a.from("Coupon").delete().eq("id",r);if(e)throw e},async getActive(r){const e=new Date().toISOString(),{data:t,error:o}=await a.from("Coupon").select("*").eq("userId",r).eq("isActive",!0).or(`startsAt.is.null,startsAt.lte.${e}`).or(`expiresAt.is.null,expiresAt.gte.${e}`).order("createdAt",{ascending:!1});if(o)throw o;return t}},c={async record(r){const{data:e,error:t}=await a.from("CouponUsage").insert(r).select().single();if(t)throw t;return e},async getByCoupon(r){const{data:e,error:t}=await a.from("CouponUsage").select("*").eq("couponId",r).order("createdAt",{ascending:!1});if(t)throw t;return e},async getByCustomer(r){const{data:e,error:t}=await a.from("CouponUsage").select("*, coupon:Coupon(*)").eq("customerId",r).order("createdAt",{ascending:!1});if(t)throw t;return e}},d={async getAll(r){const{data:e,error:t}=await a.from("Discount").select("*").eq("userId",r).order("priority",{ascending:!1});if(t)throw t;return e},async getActive(r){const e=new Date().toISOString(),{data:t,error:o}=await a.from("Discount").select("*").eq("userId",r).eq("isActive",!0).or(`startsAt.is.null,startsAt.lte.${e}`).or(`expiresAt.is.null,expiresAt.gte.${e}`).order("priority",{ascending:!1});if(o)throw o;return t},async create(r){const{data:e,error:t}=await a.from("Discount").insert(r).select().single();if(t)throw t;return e},async update(r,e){const{data:t,error:o}=await a.from("Discount").update({...e,updatedAt:new Date().toISOString()}).eq("id",r).select().single();if(o)throw o;return t},async delete(r){const{error:e}=await a.from("Discount").delete().eq("id",r);if(e)throw e}},u={async getAll(r){const{data:e,error:t}=await a.from("OrderBump").select("*, product:Product(*)").eq("userId",r).order("createdAt",{ascending:!1});if(t)throw t;return e},async getActive(r,e){let t=a.from("OrderBump").select("*, product:Product(*)").eq("userId",r).eq("isActive",!0);e&&(t=t.eq("position",e));const{data:o,error:s}=await t.order("createdAt",{ascending:!1});if(s)throw s;return o},async create(r){const{data:e,error:t}=await a.from("OrderBump").insert(r).select().single();if(t)throw t;return e},async update(r,e){const{data:t,error:o}=await a.from("OrderBump").update({...e,updatedAt:new Date().toISOString()}).eq("id",r).select().single();if(o)throw o;return t},async delete(r){const{error:e}=await a.from("OrderBump").delete().eq("id",r);if(e)throw e}},l={async getAll(r){const{data:e,error:t}=await a.from("Upsell").select(`
        *,
        fromProduct:Product!Upsell_fromProductId_fkey(*),
        toProduct:Product!Upsell_toProductId_fkey(*)
      `).eq("userId",r).order("createdAt",{ascending:!1});if(t)throw t;return e},async getByProduct(r,e){let t=a.from("Upsell").select("*, toProduct:Product!Upsell_toProductId_fkey(*)").eq("fromProductId",r).eq("isActive",!0);e&&(t=t.eq("timing",e));const{data:o,error:s}=await t.order("createdAt",{ascending:!1});if(s)throw s;return o},async create(r){const{data:e,error:t}=await a.from("Upsell").insert(r).select().single();if(t)throw t;return e},async update(r,e){const{data:t,error:o}=await a.from("Upsell").update({...e,updatedAt:new Date().toISOString()}).eq("id",r).select().single();if(o)throw o;return t},async delete(r){const{error:e}=await a.from("Upsell").delete().eq("id",r);if(e)throw e}},f={async getAll(r){const{data:e,error:t}=await a.from("CrossSell").select("*, product:Product(*)").eq("userId",r).order("createdAt",{ascending:!1});if(t)throw t;return e},async getByProduct(r,e){let t=a.from("CrossSell").select("*").eq("productId",r).eq("isActive",!0);e&&(t=t.eq("position",e));const{data:o,error:s}=await t.order("createdAt",{ascending:!1});if(s)throw s;return o},async create(r){const{data:e,error:t}=await a.from("CrossSell").insert(r).select().single();if(t)throw t;return e},async update(r,e){const{data:t,error:o}=await a.from("CrossSell").update({...e,updatedAt:new Date().toISOString()}).eq("id",r).select().single();if(o)throw o;return t},async delete(r){const{error:e}=await a.from("CrossSell").delete().eq("id",r);if(e)throw e}},w={coupons:n,couponUsage:c,discounts:d,orderBumps:u,upsells:l,crossSells:f};export{w as m};
