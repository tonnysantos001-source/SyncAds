import{s as a}from"./index-HPCb_GzC.js";const c={async list(t){try{let r=a.from("Customer").select("*").order("createdAt",{ascending:!1});t!=null&&t.status&&(r=r.eq("status",t.status)),t!=null&&t.search&&(r=r.or(`name.ilike.%${t.search}%,email.ilike.%${t.search}%,cpf.ilike.%${t.search}%`)),t!=null&&t.tags&&t.tags.length>0&&(r=r.contains("tags",t.tags));const{data:e,error:o}=await r;if(o)throw o;return e}catch(r){throw console.error("Error listing customers:",r),r}},async getById(t){try{const{data:r,error:e}=await a.from("Customer").select("*, CustomerAddress(*)").eq("id",t).single();if(e)throw e;return r}catch(r){throw console.error("Error getting customer:",r),r}},async getByEmail(t){try{const{data:r,error:e}=await a.from("Customer").select("*").eq("email",t).single();if(e)throw e;return r}catch(r){throw console.error("Error getting customer by email:",r),r}},async create(t){try{const{data:r,error:e}=await a.from("Customer").insert({...t,totalOrders:0,totalSpent:0,averageOrderValue:0}).select().single();if(e)throw e;return r}catch(r){throw console.error("Error creating customer:",r),r}},async update(t,r){try{const{data:e,error:o}=await a.from("Customer").update({...r,updatedAt:new Date().toISOString()}).eq("id",t).select().single();if(o)throw o;return e}catch(e){throw console.error("Error updating customer:",e),e}},async toggleStatus(t,r){try{const{data:e,error:o}=await a.from("Customer").update({status:r,updatedAt:new Date().toISOString()}).eq("id",t).select().single();if(o)throw o;return e}catch(e){throw console.error("Error toggling customer status:",e),e}},async delete(t){try{const{error:r}=await a.from("Customer").delete().eq("id",t);if(r)throw r}catch(r){throw console.error("Error deleting customer:",r),r}}};export{c};
