import{s as e}from"./index-DWWt1LWg.js";const s={async list(t){try{let r=e.from("Gateway").select("*").eq("isActive",!0).order("isPopular",{ascending:!1}).order("name",{ascending:!0});t!=null&&t.type&&(r=r.eq("type",t.type)),(t==null?void 0:t.isPopular)!==void 0&&(r=r.eq("isPopular",t.isPopular)),(t==null?void 0:t.supportsPix)!==void 0&&(r=r.eq("supportsPix",t.supportsPix)),(t==null?void 0:t.supportsCreditCard)!==void 0&&(r=r.eq("supportsCreditCard",t.supportsCreditCard));const{data:a,error:o}=await r;if(o)throw o;return a}catch(r){throw console.error("Error listing gateways:",r),r}},async getById(t){try{const{data:r,error:a}=await e.from("Gateway").select("*").eq("id",t).single();if(a)throw a;return r}catch(r){throw console.error("Error getting gateway:",r),r}},async getBySlug(t){try{const{data:r,error:a}=await e.from("Gateway").select("*").eq("slug",t).single();if(a)throw a;return r}catch(r){throw console.error("Error getting gateway by slug:",r),r}},async listPopular(){try{const{data:t,error:r}=await e.from("Gateway").select("*").eq("isActive",!0).eq("isPopular",!0).order("name",{ascending:!0});if(r)throw r;return t}catch(t){throw console.error("Error listing popular gateways:",t),t}}},c={async list(){try{const{data:t,error:r}=await e.from("GatewayConfig").select("*, Gateway(*)").order("isDefault",{ascending:!1}).order("createdAt",{ascending:!1});if(r)throw r;return t}catch(t){throw console.error("Error listing gateway configs:",t),t}},async getById(t){try{const{data:r,error:a}=await e.from("GatewayConfig").select("*, Gateway(*)").eq("id",t).single();if(a)throw a;return r}catch(r){throw console.error("Error getting gateway config:",r),r}},async getDefault(){try{const{data:t,error:r}=await e.from("GatewayConfig").select("*, Gateway(*)").eq("isDefault",!0).eq("isActive",!0).single();if(r)throw r;return t}catch(t){throw console.error("Error getting default gateway:",t),t}},async create(t){try{t.isDefault&&await e.from("GatewayConfig").update({isDefault:!1}).eq("organizationId",t.organizationId);const{data:r,error:a}=await e.from("GatewayConfig").insert(t).select().single();if(a)throw a;return r}catch(r){throw console.error("Error creating gateway config:",r),r}},async update(t,r){try{if(r.isDefault){const n=await e.from("GatewayConfig").select("organizationId").eq("id",t).single();n.data&&await e.from("GatewayConfig").update({isDefault:!1}).eq("organizationId",n.data.organizationId)}const{data:a,error:o}=await e.from("GatewayConfig").update({...r,updatedAt:new Date().toISOString()}).eq("id",t).select().single();if(o)throw o;return a}catch(a){throw console.error("Error updating gateway config:",a),a}},async toggleActive(t,r){try{const{data:a,error:o}=await e.from("GatewayConfig").update({isActive:r,updatedAt:new Date().toISOString()}).eq("id",t).select().single();if(o)throw o;return a}catch(a){throw console.error("Error toggling gateway:",a),a}},async setAsDefault(t){try{const r=await e.from("GatewayConfig").select("organizationId").eq("id",t).single();if(!r.data)throw new Error("Gateway config not found");await e.from("GatewayConfig").update({isDefault:!1}).eq("organizationId",r.data.organizationId);const{data:a,error:o}=await e.from("GatewayConfig").update({isDefault:!0,updatedAt:new Date().toISOString()}).eq("id",t).select().single();if(o)throw o;return a}catch(r){throw console.error("Error setting default gateway:",r),r}},async delete(t){try{const{error:r}=await e.from("GatewayConfig").delete().eq("id",t);if(r)throw r}catch(r){throw console.error("Error deleting gateway config:",r),r}},async testConnection(t){try{return{success:!0,message:"Conex√£o testada com sucesso"}}catch(r){throw console.error("Error testing gateway connection:",r),r}}};export{c as a,s as g};
